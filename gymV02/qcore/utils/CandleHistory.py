# automatically generated by the FlatBuffers compiler, do not modify

# namespace: quantix
import numpy as np
from .Indicator import Indicator


REUSE_OBJ = Indicator()  # simulation stuff


class CandleHistory(object):

    @classmethod
    def GetRootAsCandleHistory(cls, buf, offset=0):
        n = 0
        x = CandleHistory()
        x.Init(buf, n + offset)
        return x

    # CandleHistory
    def Init(self, buf, pos):
        self._tab = buf

    # CandleHistory
    def Indicator(self):
        s_name, d_data = self._tab
        if s_name == 'CANDLE':
            return d_data['CANDLE_NAME']
        else:
            return s_name

    # CandleHistory
    def StartTime(self):
        return 0

    # CandleHistory
    def Interval(self):
        _, d_data = self._tab
        return d_data['INTERVAL']

    # CandleHistory
    def POpen(self, j):
        _, d_data = self._tab
        # NOTE problem here
        return d_data['LST'].get_last_values(j-1)

    # CandleHistory
    def POpenAsNumpy(self):
        _, d_data = self._tab
        return d_data['LST'].get_last_values_as_array()

    # CandleHistory
    def POpenLength(self):
        _, d_data = self._tab
        return d_data['LST'].count

    # CandleHistory
    def PClose(self, j):
        _, d_data = self._tab
        return d_data['LST'].get_last_values(j)

    # CandleHistory
    def PCloseAsNumpy(self):
        _, d_data = self._tab
        return d_data['LST'].get_last_values_as_array()

    # CandleHistory
    def PCloseLength(self):
        _, d_data = self._tab
        return d_data['LST'].count

    # CandleHistory
    def PMax(self, j):
        _, d_data = self._tab
        return d_data['MAX'].get_last_values(j)

    # CandleHistory
    def PMaxAsNumpy(self):
        _, d_data = self._tab
        return d_data['MAX'].get_last_values_as_array()

    # CandleHistory
    def PMaxLength(self):
        _, d_data = self._tab
        return d_data['MAX'].count

    # CandleHistory
    def PMin(self, j):
        _, d_data = self._tab
        return d_data['MIN'].get_last_values(j)

    # CandleHistory
    def PMinAsNumpy(self):
        _, d_data = self._tab
        return d_data['MIN'].get_last_values_as_array()

    # CandleHistory
    def PMinLength(self):
        _, d_data = self._tab
        return d_data['MIN'].count

    # CandleHistory
    def Quantity(self, j):
        _, d_data = self._tab
        return d_data['QTD'].get_last_values(j)

    # CandleHistory
    def QuantityAsNumpy(self):
        _, d_data = self._tab
        return d_data['QTD'].get_last_values_as_array()

    # CandleHistory
    def QuantityLength(self):
        _, d_data = self._tab
        return d_data['QTD'].count

    # CandleHistory
    def QuantityBuy(self, j):
        _, d_data = self._tab
        return d_data['QTD_B'].get_last_values(j)

    # CandleHistory
    def QuantityBuyAsNumpy(self):
        _, d_data = self._tab
        return d_data['QTD_B'].get_last_values_as_array()

    # CandleHistory
    def QuantityBuyLength(self):
        _, d_data = self._tab
        return d_data['QTD_B'].count

    # CandleHistory
    def QuantitySell(self, j):
        _, d_data = self._tab
        return d_data['QTD_S'].get_last_values(j)

    # CandleHistory
    def QuantitySellAsNumpy(self):
        _, d_data = self._tab
        return d_data['QTD_S'].get_last_values_as_array()

    # CandleHistory
    def QuantitySellLength(self):
        _, d_data = self._tab
        return d_data['QTD_S'].count

    # CandleHistory
    def QuantityBuyAccumulated(self, j):
        _, d_data = self._tab
        return d_data['CUMQTD_B'].get_last_values(j)

    # CandleHistory
    def QuantityBuyAccumulatedAsNumpy(self):
        _, d_data = self._tab
        return d_data['CUMQTD_B'].get_last_values_as_array()

    # CandleHistory
    def QuantityBuyAccumulatedLength(self):
        _, d_data = self._tab
        return d_data['CUMQTD_B'].count

    # CandleHistory
    def QuantitySellAccumulated(self, j):
        _, d_data = self._tab
        return d_data['CUMQTD_S'].get_last_values(j)

    # CandleHistory
    def QuantitySellAccumulatedAsNumpy(self):
        _, d_data = self._tab
        return d_data['CUMQTD_S'].get_last_values_as_array()

    # CandleHistory
    def QuantitySellAccumulatedLength(self):
        _, d_data = self._tab
        return d_data['CUMQTD_S'].count

    # CandleHistory
    def QuantityAccumulated(self, j):
        _, d_data = self._tab
        return d_data['CUMQTD'].get_last_values(j)

    # CandleHistory
    def QuantityAccumulatedAsNumpy(self):
        _, d_data = self._tab
        return d_data['CUMQTD'].get_last_values_as_array()

    # CandleHistory
    def QuantityAccumulatedLength(self):
        _, d_data = self._tab
        return d_data['CUMQTD'].count

    # CandleHistory
    def Volume(self, j):
        _, d_data = self._tab
        return d_data['VOLUME'].get_last_values(j)

    # CandleHistory
    def VolumeAsNumpy(self):
        _, d_data = self._tab
        return d_data['VOLUME'].get_last_values_as_array()

    # CandleHistory
    def VolumeLength(self):
        _, d_data = self._tab
        return d_data['VOLUME'].count

    # CandleHistory
    def Timestamps(self, j):
        _, d_data = self._tab
        return d_data['TS'].get_last_values(j)

    # CandleHistory
    def TimestampsAsNumpy(self):
        _, d_data = self._tab
        return d_data['TS'].get_last_values_as_array()

    # CandleHistory
    def TimestampsLength(self):
        _, d_data = self._tab
        return d_data['TS'].count

    # CandleHistory
    def Result(self, j):
        s_name, d_data = self._tab
        if s_name == 'CANDLE':
            return None
        i_len = d_data['LST'].count
        REUSE_OBJ.Init(d_data[s_name][j][-i_len:], 0)
        return REUSE_OBJ

    # CandleHistory
    def ResultLength(self):
        s_name, d_data = self._tab
        if s_name == 'CANDLE':
            return 0
        # return d_data['LST'].count
        return len(d_data[s_name])

    # CandleHistory
    def LastTradeId(self):
        _, d_data = self._tab
        return d_data['ID']

    # CandleHistory
    def LastTradeTimestamp(self):
        _, d_data = self._tab
        i_len = d_data['LST'].count
        return d_data['TS'].get_last_values(i_len-1)

    # CandleHistory
    def ErrorMessage(self):
        return 'NotImplemented'
